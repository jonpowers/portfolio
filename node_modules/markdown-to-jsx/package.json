{
  "_args": [
    [
      {
        "raw": "markdown-to-jsx",
        "scope": null,
        "escapedName": "markdown-to-jsx",
        "name": "markdown-to-jsx",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/jon/dev/portfolio/full"
    ]
  ],
  "_from": "markdown-to-jsx@latest",
  "_id": "markdown-to-jsx@5.3.3",
  "_inCache": true,
  "_location": "/markdown-to-jsx",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/markdown-to-jsx-5.3.3.tgz_1493338419038_0.9596849544905126"
  },
  "_npmUser": {
    "name": "probablyup",
    "email": "probablyup@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "markdown-to-jsx",
    "scope": null,
    "escapedName": "markdown-to-jsx",
    "name": "markdown-to-jsx",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/markdown-to-jsx/-/markdown-to-jsx-5.3.3.tgz",
  "_shasum": "3e48548e15da0426f019eb95fa96f3397b95e012",
  "_shrinkwrap": null,
  "_spec": "markdown-to-jsx",
  "_where": "/Users/jon/dev/portfolio/full",
  "author": {
    "name": "Evan Scott",
    "email": "probablyup@gmail.com"
  },
  "babel": {
    "presets": [
      "es2015",
      "react",
      "stage-2"
    ]
  },
  "bugs": {
    "url": "https://github.com/probablyup/markdown-to-jsx/issues"
  },
  "dependencies": {
    "lodash.get": "^4.4.2",
    "prop-types": "^15.5.8",
    "remark-parse": "^3.0.0",
    "unified": "^6.1.2"
  },
  "description": "Interprets markdown text and outputs a JSX equivalent.",
  "devDependencies": {
    "autoprefixer-stylus": "^0.13.0",
    "babel-cli": "^6.14.0",
    "babel-jest": "^19.0.0",
    "babel-preset-es2015": "^6.14.0",
    "babel-preset-es2015-native-modules": "^6.9.4",
    "babel-preset-react": "^6.11.1",
    "babel-preset-stage-2": "^6.13.0",
    "babelify": "^7.3.0",
    "browserify": "^14.1.0",
    "budo": "^9.2.0",
    "bundle-collapser": "^1.2.1",
    "codecov": "^2.1.0",
    "in-publish": "^2.0.0",
    "jest-cli": "^19.0.2",
    "react": "^15.5.4",
    "react-dom": "^15.5.4",
    "stylus": "^0.54.5",
    "uglify-js": "^2.7.3",
    "watchify": "^3.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "3e48548e15da0426f019eb95fa96f3397b95e012",
    "tarball": "https://registry.npmjs.org/markdown-to-jsx/-/markdown-to-jsx-5.3.3.tgz"
  },
  "engines": {
    "node": ">= 4"
  },
  "files": [
    "index.js",
    "index.cjs.js",
    "index.esm.js",
    "LICENSE",
    "README.md"
  ],
  "gitHead": "d0b7e5cbbd38f7e82a891c7b3d33b412f9f4a0ec",
  "homepage": "http://probablyup.github.io/markdown-to-jsx",
  "jsnext:main": "index.esm.js",
  "keywords": [
    "markdown",
    "react",
    "jsx",
    "remark"
  ],
  "license": "MIT",
  "main": "index.cjs.js",
  "maintainers": [
    {
      "name": "probablyup",
      "email": "glitterbyte@gmail.com"
    }
  ],
  "module": "index.esm.js",
  "name": "markdown-to-jsx",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">= 0.14.0"
  },
  "readme": "# markdown to jsx compiler\n\n[![npm version](https://badge.fury.io/js/markdown-to-jsx.svg)](https://badge.fury.io/js/markdown-to-jsx) ![build status](https://api.travis-ci.org/probablyup/markdown-to-jsx.svg) [![codecov](https://codecov.io/gh/probablyup/markdown-to-jsx/branch/master/graph/badge.svg)](https://codecov.io/gh/probablyup/markdown-to-jsx) ![downloads](https://img.shields.io/npm/dm/markdown-to-jsx.svg)\n\nEnables the safe parsing of markdown into proper React JSX objects, so you don't need to use a pattern like `dangerouslySetInnerHTML` and potentially open your application up to security issues.\n\nThe only exception is arbitrary block-level HTML in the markdown (considered a markdown antipattern), which will still use the unsafe method.\n\nUses [remark-parse](https://github.com/wooorm/remark-parse) under the hood to parse markdown into a consistent AST format. The following [remark](https://github.com/wooorm/remark) settings are set by `markdown-to-jsx`:\n\n- footnotes: true\n- gfm: true\n- position: false\n\nRequires React >= 0.14.\n\n## Usage\n\n`markdown-to-jsx` exports a React component by default for easy JSX composition (since version v5):\n\nES6-style usage\\*:\n\n```jsx\nimport Markdown from 'markdown-to-jsx';\nimport React from 'react';\nimport {render} from 'react-dom';\n\nconst markdown = `\n# Hello world!\n`.trim();\n\nrender((\n    <Markdown>\n        {markdown}\n    </Markdown>\n), document.body);\n\n/*\n    renders:\n\n    <h1>Hello world!</h1>\n */\n```\n\n\\* __NOTE: JSX does not natively preserve newlines in multiline text, which is why the example above is inside an ES6 template literal. In general, writing markdown directly in JSX is discouraged and it's a better idea to keep your content in separate .md files and require them, perhaps using webpack's [raw-loader](https://github.com/webpack-contrib/raw-loader).__\n\nOverride a particular HTML tag's output:\n\n```jsx\nimport Markdown from 'markdown-to-jsx';\nimport React from 'react';\nimport {render} from 'react-dom';\n\n// surprise, it's a div instead!\nconst MyParagraph = ({children, ...props}) => (<div {...props}>{children}</div>);\n\nrender((\n    <Markdown\n        options={{\n            overrides: {\n                h1: {\n                    component: MyParagraph,\n                    props: {\n                        className: 'foo',\n                    },\n                },\n            },\n        }}>\n        # Hello world!\n    </Markdown>\n), document.body);\n\n/*\n    renders:\n\n    <div class=\"foo\">\n        Hello World\n    </div>\n */\n```\n\nDepending on the type of element, there are some props that must be preserved to ensure the markdown is converted as intended. They are:\n\n- `a`: `title`, `href`\n- `img`: `title`, `alt`, `src`\n- `input[type=\"checkbox\"]`: `checked`, `readonly` (specifically, the one rendered by a GFM task list)\n- `ol`: `start`\n- `td`: `style`\n- `th`: `style`\n\nAny conflicts between passed `props` and the specific properties above will be resolved in favor of `markdown-to-jsx`'s code.\n\n## Using the compiler directly\n\nIf desired, the compiler function is a \"named\" export on the `markdown-to-jsx` module:\n\n```jsx\nimport {compiler} from 'markdown-to-jsx';\nimport React from 'react';\nimport {render} from 'react-dom';\n\nrender(compiler('# Hello world!'), document.body);\n\n/*\n    renders:\n\n    <h1>Hello world!</h1>\n */\n```\n\nIt accepts the following arguments:\n\n```js\ncompiler(markdown: string, options: object?)\n```\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/probablyup/markdown-to-jsx.git"
  },
  "scripts": {
    "build": "babel index.js --out-file index.cjs.js && babel index.js --no-babelrc --out-file index.esm.js --presets=es2015-native-modules,react,stage-2",
    "prepublish": "in-publish && npm run build || not-in-publish",
    "site:css": "stylus -u autoprefixer-stylus site.styl -o docs/css/style.css",
    "site:css:release": "npm run site:css -- -c",
    "site:css:watch": "npm run site:css -- -w -m -l --sourcemap-inline",
    "site:js": "browserify site.js -t babelify -p bundle-collapser/plugin",
    "site:js:release": "NODE_ENV=production npm run -s site:js | uglifyjs -mc drop_console --screw-ie8 -o docs/js/bundle.js",
    "site:js:watch": "budo site.js:js/bundle.js -d docs -H 0.0.0.0 --colors --live --open --pushstate --iw -- -t babelify",
    "site:release": "npm run site:css:release && npm run site:js:release",
    "start": "sh scripts/parallelize.sh \"npm run site:css:watch\" \"npm run site:js:watch\"",
    "test": "jest --verbose"
  },
  "version": "5.3.3"
}

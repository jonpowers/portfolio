{
  "_args": [
    [
      {
        "raw": "webpack-node-externals@^1.5.4",
        "scope": null,
        "escapedName": "webpack-node-externals",
        "name": "webpack-node-externals",
        "rawSpec": "^1.5.4",
        "spec": ">=1.5.4 <2.0.0",
        "type": "range"
      },
      "/Users/jon/dev/portfolio/full"
    ]
  ],
  "_from": "webpack-node-externals@>=1.5.4 <2.0.0",
  "_id": "webpack-node-externals@1.5.4",
  "_inCache": true,
  "_location": "/webpack-node-externals",
  "_nodeVersion": "5.0.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/webpack-node-externals-1.5.4.tgz_1475680648792_0.7082913401536644"
  },
  "_npmUser": {
    "name": "liady",
    "email": "liadydev@gmail.com"
  },
  "_npmVersion": "3.10.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "webpack-node-externals@^1.5.4",
    "scope": null,
    "escapedName": "webpack-node-externals",
    "name": "webpack-node-externals",
    "rawSpec": "^1.5.4",
    "spec": ">=1.5.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/webpack-node-externals/-/webpack-node-externals-1.5.4.tgz",
  "_shasum": "ea05ba17108a23e776c35c42e7bb0e86c225be00",
  "_shrinkwrap": null,
  "_spec": "webpack-node-externals@^1.5.4",
  "_where": "/Users/jon/dev/portfolio/full",
  "author": {
    "name": "Liad Yosef",
    "url": "https://github.com/liady"
  },
  "bugs": {
    "url": "https://github.com/liady/webpack-node-externals/issues"
  },
  "dependencies": {},
  "description": "Easily exclude node_modules in Webpack bundle",
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^2.5.3",
    "mock-fs": "3.10.0",
    "ncp": "^2.0.0",
    "webpack": "^1.13.1"
  },
  "directories": {},
  "dist": {
    "shasum": "ea05ba17108a23e776c35c42e7bb0e86c225be00",
    "tarball": "https://registry.npmjs.org/webpack-node-externals/-/webpack-node-externals-1.5.4.tgz"
  },
  "files": [
    "LICENSE",
    "README.md",
    "index.js"
  ],
  "gitHead": "5c030f3351b921efaeabff9312f82dd9a8344308",
  "homepage": "https://github.com/liady/webpack-node-externals",
  "keywords": [
    "webpack",
    "node_modules",
    "node",
    "bundle",
    "externals"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "liady",
      "email": "liadydev@gmail.com"
    }
  ],
  "name": "webpack-node-externals",
  "optionalDependencies": {},
  "readme": "Webpack node modules externals\r\n==============================\r\n> Easily exclude node modules in Webpack\r\n\r\n[![Version](https://img.shields.io/npm/v/webpack-node-externals.svg)](https://www.npmjs.org/package/webpack-node-externals)\r\n[![Downloads](https://img.shields.io/npm/dm/webpack-node-externals.svg)](https://www.npmjs.org/package/webpack-node-externals)\r\n[![Build Status](https://travis-ci.org/liady/webpack-node-externals.svg?branch=master)](https://travis-ci.org/liady/webpack-node-externals)\r\n\r\nWebpack allows you to define [*externals*](https://webpack.github.io/docs/configuration.html#externals) - modules that should not be bundled.\r\n\r\nWhen bundling with Webpack for the backend - you usually don't want to bundle its `node_modules` dependencies.\r\nThis library creates an *externals* function that ignores `node_modules` when bundling in Webpack.<br/>(Inspired by the great [Backend apps with Webpack](http://jlongster.com/Backend-Apps-with-Webpack--Part-I) series)\r\n\r\n## Quick usage\r\n```sh\r\nnpm install webpack-node-externals --save-dev\r\n```\r\n\r\nIn your `webpack.config.js`:\r\n```js\r\nvar nodeExternals = require('webpack-node-externals');\r\n...\r\nmodule.exports = {\r\n    ...\r\n    target: 'node', // in order to ignore built-in modules like path, fs, etc.\r\n    externals: [nodeExternals()], // in order to ignore all modules in node_modules folder\r\n    ...\r\n};\r\n```\r\nAnd that's it. All node modules will no longer be bundled but will be left as `require('module')`.\r\n\r\n## Detailed overview\r\n### Description\r\nThis library scans the `node_modules` folder for all node_modules names, and builds an *externals* function that tells Webpack not to bundle those modules, or any sub-modules of theirs.\r\n\r\n### Configuration\r\nThis library accepts an `options` object.\r\n\r\n#### `options.whitelist (=[])`\r\nAn array for the `externals` to whitelist, so they **will** be included in the bundle. Can accept exact strings (`'module_name'`), regex patterns (`/^module_name/`), or a function that accepts the module name and returns whether it should be included.\r\n<br/>**Important** - if you have set aliases in your webpack config with the exact same names as modules in *node_modules*, you need to whitelist them so Webpack will know they should be bundled.\r\n\r\n#### `options.importType (='commonjs')`\r\nThe method in which unbundled modules will be required in the code. Best to leave as `commonjs` for node modules.\r\n\r\n#### `options.modulesDir (='node_modules')`\r\nThe folder in which to search for the node modules.\r\n\r\n#### `options.modulesFromFile (=false)`\r\nRead the modules from the `package.json` file instead of the `node_modules` folder.\r\n\r\n#### Example\r\n```js\r\nvar nodeExternals = require('webpack-node-externals');\r\n...\r\nmodule.exports = {\r\n    ...\r\n    target: 'node', // important in order not to bundle built-in modules like path, fs, etc.\r\n    externals: [nodeExternals({\r\n        // this WILL include `jquery` and `webpack/hot/dev-server` in the bundle, as well as `lodash/*`\r\n        whitelist: ['jquery', 'webpack/hot/dev-server', /^lodash/]\r\n    })],\r\n    ...\r\n};\r\n```\r\n    \r\nFor most use cases, the defaults of `importType` and `modulesDir` should be used.\r\n\r\n## Q&A\r\n#### Why not just use a regex in the Webpack config?\r\nWebpack allows inserting [regex](https://webpack.github.io/docs/configuration.html#externals) in the *externals* array, to capture non-relative modules:\r\n```js\r\n{\r\n    externals: [\r\n        // Every non-relative module is external\r\n        // abc -> require(\"abc\")\r\n        /^[a-z\\-0-9]+$/\r\n    ]\r\n}\r\n```\r\nHowever, this will leave unbundled **all non-relative requires**, so it does not account for aliases that may be defined in webpack itself.\r\nThis library scans the `node_modules` folder, so it only leaves unbundled the actual node modules that are being used.\r\n\r\n#### How can I bundle required assets (i.e css files) from node_modules?\r\nUsing the `whitelist` option, this is possible. We can simply tell Webpack to bundle all files with extensions that are not js/jsx/json, using this [regex](https://regexper.com/#%5C.(%3F!(%3F%3Ajs%7Cjson)%24).%7B1%2C5%7D%24):\r\n```js\r\n...\r\nnodeExternals({\r\n  // load non-javascript files with extensions, presumably via loaders\r\n  whitelist: [/\\.(?!(?:jsx?|json)$).{1,5}$/i],\r\n}),\r\n...\r\n```\r\nThanks @wmertens for this idea.\r\n\r\n## Contribute\r\nContributions and pull requests are welcome. Please run the tests to make sure nothing breaks.\r\n### Test\r\n```sh\r\nnpm run test\r\n```\r\n\r\n## License\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/liady/webpack-node-externals.git"
  },
  "scripts": {
    "test": "npm run unit-watch",
    "unit": "mocha --colors ./test/*.spec.js",
    "unit-watch": "mocha --colors -w ./test/*.spec.js"
  },
  "version": "1.5.4"
}

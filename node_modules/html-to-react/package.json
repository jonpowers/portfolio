{
  "_args": [
    [
      {
        "raw": "html-to-react",
        "scope": null,
        "escapedName": "html-to-react",
        "name": "html-to-react",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/jon/dev/portfolio/full"
    ]
  ],
  "_from": "html-to-react@latest",
  "_id": "html-to-react@1.2.7",
  "_inCache": true,
  "_location": "/html-to-react",
  "_nodeVersion": "7.7.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/html-to-react-1.2.7.tgz_1492173322394_0.4780501152854413"
  },
  "_npmUser": {
    "name": "arve.knudsen",
    "email": "arve.knudsen@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "html-to-react",
    "scope": null,
    "escapedName": "html-to-react",
    "name": "html-to-react",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/html-to-react/-/html-to-react-1.2.7.tgz",
  "_shasum": "b50b4737d020d728f1b4823543b82148372808dd",
  "_shrinkwrap": null,
  "_spec": "html-to-react",
  "_where": "/Users/jon/dev/portfolio/full",
  "author": {
    "name": "Arve Knudsen, Mike Nikles"
  },
  "bugs": {
    "url": "https://github.com/aknuds1/html-to-react/issues"
  },
  "config": {
    "blanket": {
      "pattern": [
        ""
      ],
      "data-cover-never": [
        "node_modules",
        "test"
      ]
    }
  },
  "dependencies": {
    "domhandler": "^2.3.0",
    "htmlparser2": "^3.8.3",
    "ramda": "^0.23.0",
    "underscore.string.fp": "^1.0.4"
  },
  "description": "A lightweight library that converts raw HTML to a React DOM structure.",
  "devDependencies": {
    "coveralls": "^2.11",
    "eslint": "^3.7.0",
    "istanbul": "^0.4",
    "mocha": "^3.0",
    "mocha-lcov-reporter": "^1.2.0",
    "react": "^15.0",
    "react-dom": "^15.0"
  },
  "directories": {},
  "dist": {
    "shasum": "b50b4737d020d728f1b4823543b82148372808dd",
    "tarball": "https://registry.npmjs.org/html-to-react/-/html-to-react-1.2.7.tgz"
  },
  "gitHead": "a73d19b80c56326677e96097d8fab3f5c46c5888",
  "homepage": "https://github.com/aknuds1/html-to-react",
  "keywords": [
    "react",
    "react-component",
    "html"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "arian.hosseinzadeh",
      "email": "aryan.hosseinzadeh@gmail.com"
    },
    {
      "name": "arve.knudsen",
      "email": "arve.knudsen@gmail.com"
    },
    {
      "name": "mikenikles",
      "email": "mike@esladvice.com"
    }
  ],
  "name": "html-to-react",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.0"
  },
  "readme": "# html-to-react\n[![Build Status](https://travis-ci.org/aknuds1/html-to-react.svg?branch=master)](https://travis-ci.org/aknuds1/html-to-react)\n[![npm version](https://badge.fury.io/js/html-to-react.svg)](http://badge.fury.io/js/html-to-react)\n[![Dependency Status](https://david-dm.org/aknuds1/html-to-react.svg)](https://david-dm.org/aknuds1/html-to-react)\n[![Coverage Status](https://coveralls.io/repos/aknuds1/html-to-react/badge.svg?branch=master)](https://coveralls.io/r/aknuds1/html-to-react?branch=master)\n[![npm](https://img.shields.io/npm/dm/html-to-react.svg?maxAge=2592000)](https://www.npmjs.com/package/html-to-react)\n\nA lightweight library that converts raw HTML to a React DOM structure.\n\n## Why?\nI had a scenario where an HTML template was generated by a different team, yet I wanted to leverage\nReact for the parts I did have control over. The template basically contains something like:\n\n```\n<div class=\"row\">\n    <div class=\"col-sm-6\">\n        <div data-report-id=\"report-1\">\n          <!-- A React component for report-1 -->\n        </div>\n    </div>\n    <div class=\"col-sm-6\">\n        <div data-report-id=\"report-2\">\n          <!-- A React component for report-2 -->\n        </div>\n    </div>\n</div>\n```\n\nI had to replace each `<div>` that contains a `data-report-id` attribute with an actual report,\nwhich was nothing more than a React component.\n\nSimply replacing the `<div>` elements with a React component would end up with multiple top-level\nReact components that have no common parent.\n\nThe **html-to-react** module solves this problem by parsing each DOM element and converting it to a\nReact tree with one single parent.\n\n## Installation\n\n`$ npm install --save html-to-react`\n\n## Examples\n\n### Simple\n\nThe following example parses each node and its attributes and returns a tree of React elements.\n\n```javascript\nvar ReactDOMServer = require('react-dom/server');\nvar HtmlToReactParser = require('html-to-react').Parser;\n\nvar htmlInput = '<div><h1>Title</h1><p>A paragraph</p></div>';\nvar htmlToReactParser = new HtmlToReactParser();\nvar reactElement = htmlToReactParser.parse(htmlInput);\nvar reactHtml = ReactDOMServer.renderToStaticMarkup(reactElement);\n\nassert.equal(reactHtml, htmlInput); // true\n```\n\n### With Custom Processing Instructions\n\nIf certain DOM nodes require specific processing, for example if you want to capitalize each\n`<h1>` tag, the following example demonstrates this:\n\n```javascript\nvar ReactDOMServer = require('react-dom/server');\nvar HtmlToReactParser = require('html-to-react').Parser;\n\nvar htmlInput = '<div><h1>Title</h1><p>Paragraph</p><h1>Another title</h1></div>';\nvar htmlExpected = '<div><h1>TITLE</h1><p>Paragraph</p><h1>ANOTHER TITLE</h1></div>';\n\nvar isValidNode = function () {\n    return true;\n};\n\n// Order matters. Instructions are processed in the order they're defined\nvar processNodeDefinitions = new HtmlToReact.ProcessNodeDefinitions(React);\nvar processingInstructions = [\n    {\n        // Custom <h1> processing\n        shouldProcessNode: function (node) {\n            return node.parent && node.parent.name && node.parent.name === 'h1';\n        },\n        processNode: function (node, children) {\n            return node.data.toUpperCase();\n        }\n    }, {\n        // Anything else\n        shouldProcessNode: function (node) {\n            return true;\n        },\n        processNode: processNodeDefinitions.processDefaultNode\n    }];\nvar htmlToReactParser = new HtmlToReactParser();\nvar reactComponent = htmlToReactParser.parseWithInstructions(htmlInput, isValidNode,\n  processingInstructions);\nvar reactHtml = ReactDOMServer.renderToStaticMarkup(reactComponent);\nassert.equal(reactHtml, htmlExpected);\n```\n\n### Replace the Children of an Element\n\nThere may be a situation where you want to replace the children of an element with a React\ncomponent. This is beneficial if you want to:\n- a) Preserve the containing element\n- b) Not rely on any child node to insert your React component\n\n#### Example\n\nBelow is a simple template that could get loaded via ajax into your application\n\n##### Before\n```\n<div class=\"row\">\n    <div class=\"col-sm-6\">\n        <div data-container=\"wysiwyg\">\n            <h1>Sample Heading</h1>\n            <p>Sample Text</p>\n        </div>\n    </div>\n</div>\n```\n\n##### After\n\nYou may want to extract the inner html from the `data-container` attribute, store it and then pass\nit as a prop to your injected `RichTextEditor`.\n\n```\n<div class=\"row\">\n    <div class=\"col-sm-6\">\n        <div data-container=\"wysiwyg\">\n            <RichTextEditor html={\"<h1>Sample heading</h1><p>Sample Text</p>\"} />\n        </div>\n    </div>\n</div>\n```\n\n#### Setup\n\nIn your instructions object, you must specify `replaceChildren: true`.\n\n```javascript\nvar React = require('react');\nvar HtmlToReactParser = require('html-to-react').Parser;\n\nvar htmlToReactParser = new HtmlToReactParser();\nvar htmlInput = '<div><div data-test=\"foo\"><p>Text</p><p>Text</p></div></div>';\nvar htmlExpected = '<div><div data-test=\"foo\"><h1>Heading</h1></div></div>';\n\nvar isValidNode = function () {\n    return true;\n};\n\n// Order matters. Instructions are processed in\n// the order they're defined\nvar processingInstructions = [\n    {\n       // This is REQUIRED, it tells the parser\n       // that we want to insert our React\n       // component as a child\n       replaceChildren: true,\n       shouldProcessNode: function (node) {\n            return node.attribs && node.attribs['data-test'] === 'foo';\n        },\n        processNode: function (node, children, index) {\n            return React.createElement('h1', {key: index,}, 'Heading');\n        }\n    },\n    {\n        // Anything else\n        shouldProcessNode: function (node) {\n            return true;\n        },\n        processNode: processNodeDefinitions.processDefaultNode,\n    },\n];\n\nvar reactComponent = parser.parseWithInstructions(\n  htmlInput, isValidNode, processingInstructions);\nvar reactHtml = ReactDOMServer.renderToStaticMarkup(\n  reactComponent);\nassert.equal(reactHtml, htmlExpected);\n```\n\n## Tests & Coverage\n\nTest locally: `$ npm test`\n\nTest with coverage and report coverage to Coveralls: `$ npm run test-coverage`\n\nTest with coverage and open HTML report: `$ npm run test-html-coverage`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aknuds1/html-to-react.git"
  },
  "scripts": {
    "test": "eslint . && ./node_modules/mocha/bin/mocha",
    "test-coverage": "eslint . && istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage",
    "test-html-coverage": "eslint . && istanbul cover ./node_modules/mocha/bin/_mocha; open coverage/lcov-report/index.html"
  },
  "version": "1.2.7"
}
